"""
enrich_rooms.py

Purpose:
    Enriches the existing catalog.json by adding AI-generated room suggestions for each artwork.
    Uses OpenAI's API to analyze each artwork's metadata and suggest suitable rooms with confidence scores.
    Updates the attributes field of each artwork with suggested rooms, and saves the enriched catalog back to catalog.json.

Usage:
    Run this script after enrich_catalog.py to add room suggestions to your catalog.
    Requires OpenAI API key to be set in environment variable OPENAI_API_KEY.
"""

import json
import os
import time
from openai import OpenAI
import sys

# Configuration
CATALOG_PATH = "../catalog/catalog.json"
OPENAI_MODEL = "gpt-4o-mini"  # Using gpt-4o-mini for cost efficiency
ROOM_OPTIONS = [
    "living room", "bedroom", "office", "kitchen", "bathroom", 
    "hallway", "dining room", "nursery", "study", "family room", "other"
]

def create_room_prompt(artwork):
    """Create a prompt for the LLM to suggest rooms for an artwork."""
    
    # Extract relevant metadata
    title = artwork.get('title', '')
    description = artwork.get('description', '')
    style = artwork.get('attributes', {}).get('style', {}).get('label', '')
    subject = artwork.get('attributes', {}).get('subject', {}).get('label', '')
    colors = artwork.get('attributes', {}).get('dominant_colors', [])
    
    # Format colors for the prompt
    color_info = ""
    if colors:
        color_names = [color.get('color', '') for color in colors[:3]]  # Top 3 colors
        color_info = f"Colors: {', '.join(color_names)}"
    
    prompt = f"""Given the following artwork metadata, suggest the most suitable room(s) for displaying this artwork from the following list: {', '.join(ROOM_OPTIONS)}.

For each suggested room, provide a confidence score between 0 and 1 (where 1 is highest confidence).

**Title:** {title}
**Description:** {description}
**Style:** {style}
**Subject:** {subject}
{color_info}

Respond in JSON format only:
{{
  "suggested_rooms": [
    {{"room": "room_name", "confidence": 0.85}},
    {{"room": "room_name", "confidence": 0.65}}
  ]
}}

Only include rooms with confidence > 0.3. Provide 1-3 room suggestions maximum."""

    return prompt

def get_room_suggestions(client, artwork):
    """Get room suggestions from OpenAI for a single artwork."""
    
    try:
        prompt = create_room_prompt(artwork)
        
        response = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": "You are an expert interior designer who specializes in art placement. Provide room suggestions based on artwork characteristics."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,  # Lower temperature for more consistent results
            max_tokens=200
        )
        
        # Extract the JSON response
        content = response.choices[0].message.content.strip()
        
        # Try to parse JSON from the response
        try:
            # Find JSON in the response (in case there's extra text)
            start_idx = content.find('{')
            end_idx = content.rfind('}') + 1
            if start_idx != -1 and end_idx != 0:
                json_str = content[start_idx:end_idx]
                result = json.loads(json_str)
                return result.get('suggested_rooms', [])
            else:
                print(f"Could not find JSON in response: {content}")
                return []
                
        except json.JSONDecodeError as e:
            print(f"Failed to parse JSON response: {content}")
            print(f"Error: {e}")
            return []
            
    except Exception as e:
        print(f"Error getting room suggestions: {e}")
        return []

def enrich_catalog_with_rooms():
    """Enriches the art catalog with room suggestions generated by OpenAI."""
    
    # Check for OpenAI API key
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("Error: OPENAI_API_KEY environment variable not set.")
        print("Please set your OpenAI API key: export OPENAI_API_KEY='your-api-key-here'")
        return
    
    # Initialize OpenAI client
    client = OpenAI(api_key=api_key)
    
    # Load the catalog
    try:
        with open(CATALOG_PATH, 'r') as f:
            catalog = json.load(f)
        print(f"Successfully loaded catalog with {len(catalog)} items.")
    except FileNotFoundError:
        print(f"Error: Catalog file not found at {CATALOG_PATH}")
        return
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from {CATALOG_PATH}")
        return

    # Enrich each artwork
    enriched_count = 0
    total_artworks = len(catalog)
    
    for i, artwork in enumerate(catalog):
        try:
            print(f"Processing {i+1}/{total_artworks}: {artwork['title']}")
            
            # Get room suggestions
            room_suggestions = get_room_suggestions(client, artwork)
            
            if room_suggestions:
                # Add room suggestions to artwork attributes
                if 'attributes' not in artwork:
                    artwork['attributes'] = {}
                
                artwork['attributes']['suggested_rooms'] = room_suggestions
                
                # Print the suggestions
                rooms_str = ", ".join([f"{r['room']} ({r['confidence']:.2f})" for r in room_suggestions])
                print(f"  -> Suggested rooms: {rooms_str}")
                
                enriched_count += 1
            else:
                print(f"  -> No room suggestions generated")
            
            # Add a small delay to avoid rate limiting
            time.sleep(0.5)
            
        except Exception as e:
            print(f"Could not process artwork {artwork.get('title', 'Unknown')}: {e}")
            continue

    # Save the updated catalog
    try:
        with open(CATALOG_PATH, 'w') as f:
            json.dump(catalog, f, indent=4)
        print(f"\nEnrichment complete. Enriched {enriched_count} artworks with room suggestions.")
        print(f"Updated catalog saved to {CATALOG_PATH}")
    except Exception as e:
        print(f"Error saving updated catalog: {e}")

def test_single_artwork():
    """Test function to process a single artwork for debugging."""
    
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("Error: OPENAI_API_KEY environment variable not set.")
        return
    
    client = OpenAI(api_key=api_key)
    
    # Load catalog and test with first artwork
    try:
        with open(CATALOG_PATH, 'r') as f:
            catalog = json.load(f)
        
        if catalog:
            test_artwork = catalog[0]
            print(f"Testing with artwork: {test_artwork['title']}")
            
            suggestions = get_room_suggestions(client, test_artwork)
            print(f"Room suggestions: {json.dumps(suggestions, indent=2)}")
            
    except Exception as e:
        print(f"Error in test: {e}")

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--test":
        test_single_artwork()
    else:
        enrich_catalog_with_rooms() 