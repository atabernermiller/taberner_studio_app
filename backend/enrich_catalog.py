"""
enrich_catalog.py

Purpose:
    Enriches the existing catalog.json by adding AI-generated style and subject attributes for each artwork.
    Loads a CLIP model for zero-shot image classification and classifies each artwork image for style and subject using predefined label lists.
    Updates the attributes field of each artwork with the top predicted style and subject, and saves the enriched catalog back to catalog.json.

Usage:
    Run this script after process_catalog.py to add AI-generated metadata to your catalog.
"""
import json
from PIL import Image
from transformers import pipeline
import torch
import os

# 1. Configuration
MODEL_NAME = "openai/clip-vit-large-patch14"
CATALOG_PATH = "catalog/catalog.json"
IMAGE_DIR = "catalog/images"
# Use GPU if available, otherwise CPU. Set to -1 for CPU, 0 for first GPU.
DEVICE = 0 if torch.cuda.is_available() else -1

# Define candidate labels for zero-shot classification
STYLE_LABELS = ["Fine Art", "Documentary", "Street Photography", "Black and White", "Architectural", "Nature", "Long Exposure", "Abstract", "Minimalism", "Modern", "Contemporary", "Realism"]
SUBJECT_LABELS = ["Portrait", "Landscape", "Seascape", "Still Life", "Abstract", "Animals", "Cityscape", "Figurative", "Nude", "Mythology"]

def enrich_catalog():
    """
    Enriches the art catalog with style and subject attributes generated by a CLIP model.
    """
    # 2. Load the CLIP model
    try:
        classifier = pipeline("zero-shot-image-classification", model=MODEL_NAME, device=DEVICE)
        print(f"Successfully loaded CLIP model: {MODEL_NAME}")
    except Exception as e:
        print(f"Error loading model: {e}")
        return

    # 3. Load the catalog
    try:
        with open(CATALOG_PATH, 'r') as f:
            catalog = json.load(f)
        print(f"Successfully loaded catalog with {len(catalog)} items.")
    except FileNotFoundError:
        print(f"Error: Catalog file not found at {CATALOG_PATH}")
        return
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from {CATALOG_PATH}")
        return

    # 4. Enrich each artwork
    enriched_count = 0
    total_artworks = len(catalog)
    for i, artwork in enumerate(catalog):
        image_filename = artwork.get("filename")
        if not image_filename:
            print(f"Skipping artwork with missing image filename: {artwork.get('id')}")
            continue

        image_path = os.path.join(IMAGE_DIR, image_filename)
        if not os.path.exists(image_path):
            print(f"Image not found for {image_filename}, skipping.")
            continue

        try:
            print(f"Processing {i+1}/{total_artworks}: {artwork['title']}")
            image = Image.open(image_path).convert("RGB")

            # Classify style
            style_results = classifier(image, candidate_labels=STYLE_LABELS)
            if style_results:
                top_style_result = style_results[0]
                artwork['attributes']['style'] = {
                    'label': top_style_result['label'],
                    'confidence': top_style_result['score']
                }
            else:
                artwork['attributes']['style'] = {
                    'label': "Unknown",
                    'confidence': 0.0
                }

            # Classify subject
            subject_results = classifier(image, candidate_labels=SUBJECT_LABELS)
            if subject_results:
                top_subject_result = subject_results[0]
                artwork['attributes']['subject'] = {
                    'label': top_subject_result['label'],
                    'confidence': top_subject_result['score']
                }
            else:
                artwork['attributes']['subject'] = {
                    'label': "Unknown",
                    'confidence': 0.0
                }
            
            enriched_count += 1
            print(f"  -> Style: {artwork['attributes']['style']['label']} ({artwork['attributes']['style']['confidence']:.3f})")
            print(f"  -> Subject: {artwork['attributes']['subject']['label']} ({artwork['attributes']['subject']['confidence']:.3f})")

        except Exception as e:
            print(f"Could not process image {image_filename}: {e}")

    # 5. Save the updated catalog
    try:
        with open(CATALOG_PATH, 'w') as f:
            json.dump(catalog, f, indent=4)
        print(f"\nEnrichment complete. Enriched {enriched_count} artworks.")
        print(f"Updated catalog saved to {CATALOG_PATH}")
    except Exception as e:
        print(f"Error saving updated catalog: {e}")

if __name__ == "__main__":
    enrich_catalog()
